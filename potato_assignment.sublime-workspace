{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"font-",
				"font-weight"
			],
			[
				"as",
				"as_view"
			],
			[
				"posts",
				"posts"
			],
			[
				"Te",
				"TestCase"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "713957764029942404031",
			"settings":
			{
				"buffer_size": 21,
				"line_ending": "Unix",
				"name": "713957764029942404031"
			}
		},
		{
			"file": "blog/search.py",
			"settings":
			{
				"buffer_size": 3429,
				"line_ending": "Unix"
			}
		},
		{
			"file": "blog/models.py",
			"settings":
			{
				"buffer_size": 4307,
				"line_ending": "Unix"
			}
		},
		{
			"file": "blog/management/commands/manage_index.py",
			"settings":
			{
				"buffer_size": 1390,
				"line_ending": "Unix"
			}
		},
		{
			"file": "blog/urls.py",
			"settings":
			{
				"buffer_size": 1304,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\nimport json\n\nfrom django.core.urlresolvers import reverse\nfrom django.views.generic.detail import DetailView\nfrom django.views.generic.list import ListView\nfrom django.views.generic.list import BaseListView\nfrom django.views.generic.edit import UpdateView\nfrom django.views.generic.edit import CreateView\nfrom django.views.generic.edit import BaseCreateView\nfrom django.views.generic.edit import DeleteView\nfrom django.views.generic.base import View\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.csrf import requires_csrf_token\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.decorators import permission_required\nfrom django.http import HttpResponse\n\nfrom .models import Post\nfrom .models import Tag\nfrom .models import Comment\nfrom .forms import PostForm\nfrom .forms import CommentForm\nfrom .search import search\n\nimport logging\nlogging.basicConfig()\nlogger = logging.getLogger(\"blog.console\")\n\n\nclass HomepageView(ListView):\n    \"\"\" Homepage view that get the 3 latest created posts\n    \"\"\"\n    context_object_name = \"posts\"\n    template_name = \"blog/homepage.html\"\n    queryset = Post.objects.all()[:3]\n\n\nclass PostsView(ListView):\n    \"\"\" View that shows all the posts sorted by creation and paginated\n    \"\"\"\n    model = Post\n    context_object_name = \"posts\"\n    template_name = \"blog/posts.html\"\n    paginate_by = 2\n\n\nclass PostView(DetailView):\n    \"\"\" The detail view of a single post\n    \"\"\"\n    context_object_name = \"post\"\n    template_name = \"blog/post.html\"\n    model = Post\n\n    def get_context_data(self, **kwargs):\n        queryset = super(PostView, self).get_context_data(**kwargs)\n        comments = Comment.objects.filter(post=queryset['post'])\n        queryset.update({\"comments\": comments,\n                         \"form\": CommentForm()})\n        return queryset\n\n\nclass PostEdit(UpdateView):\n    \"\"\" Edit a single post\n    \"\"\"\n    template_name = \"blog/post_edit.html\"\n    model = Post\n    form_class = PostForm\n\n    @method_decorator(requires_csrf_token)\n    @method_decorator(login_required)\n    @method_decorator(permission_required(\"blog.post_edit\"))\n    def dispatch(self, *args, **kwargs):\n        return super(PostEdit, self).dispatch(*args, **kwargs)\n\n\nclass PostAdd(CreateView):\n    \"\"\" Add a single post\n    \"\"\"\n    template_name = \"blog/post_add.html\"\n    form_class = PostForm\n\n    @method_decorator(requires_csrf_token)\n    @method_decorator(login_required)\n    @method_decorator(permission_required('blog.post_add'))\n    def dispatch(self, *args, **kwargs):\n        return super(PostAdd, self).dispatch(*args, **kwargs)\n\n\nclass TagsView(ListView):\n    \"\"\" View that shows all the tags\n    \"\"\"\n    model = Tag\n    context_object_name = \"tags\"\n    template_name = \"blog/tags.html\"\n    paginate_by = 2\n\n\nclass TagView(DetailView):\n    \"\"\" The detail view of a single tag\n    \"\"\"\n    model = Tag\n    context_object_name = \"tag\"\n    template_name = \"blog/tag.html\"\n\n\nclass JSONView(View):\n    def render_to_response(self, context, **httpresponse_kwargs):\n        \"Returns a JSON response containing 'context' as payload\"\n        return self.get_json_response(self.convert_context_to_json(context),\n                                      **httpresponse_kwargs)\n\n    def get_json_response(self, content, **httpresponse_kwargs):\n        \"Construct an `HttpResponse` object.\"\n        return HttpResponse(content,\n                            content_type='application/json',\n                            **httpresponse_kwargs)\n\n    def convert_context_to_json(self, context):\n        \"Convert the context dictionary into a JSON object\"\n        return json.dumps(context)\n\n\nclass PostDelete(DeleteView):\n    \"\"\" Remove a single post\n    \"\"\"\n\n    model = Post\n\n    def get_success_url(self):\n        return reverse(\"posts\")\n\n    @method_decorator(requires_csrf_token)\n    @method_decorator(login_required)\n    @method_decorator(permission_required('blog.post_delete'))\n    def dispatch(self, request, *args, **kwargs):\n        response = super(PostDelete, self).dispatch(request, *args, **kwargs)\n        pk = request.POST.get(\"post\")\n        # If not pk I'm in the confirmation view\n        if pk:\n            # Dirty hack to wait to return until GAE really removed my object\n            while Post.objects.filter(pk=pk).exists():\n                pass\n        return response\n\n\nclass JSONCommentAdd(JSONView, BaseCreateView):\n    \"\"\" View to add comment. Posting to this from post.html\n    \"\"\"\n    model = Comment\n\n    def form_invalid(self, form):\n        context = self.get_context_data(form=form,\n                                        success=False)\n        return self.render_to_response(context)\n\n    def form_valid(self, form):\n        self.object = form.save()\n        context = self.get_context_data(form=form,\n                                        obj=self.object,\n                                        success=True)\n        return self.render_to_response(context)\n\n    @method_decorator(requires_csrf_token)\n    def dispatch(self, *args, **kwargs):\n        return super(JSONCommentAdd, self).dispatch(*args, **kwargs)\n\n    def get_context_data(self, **kwargs):\n        success = kwargs.get('success', False)\n        options = kwargs.get('options', {})\n        to_json = {}\n        fields = {}\n        to_json.update(options=options)\n        to_json.update(success=success)\n\n        if not success:\n            errors = {}\n            form = kwargs.get('form')\n            for field_name, field in form.fields.items():\n                fields[field_name] = unicode(form[field_name].value())\n            to_json.update(fields=fields)\n            if form.errors:\n                errors.update({'non_field_errors': form.non_field_errors()})\n            fields = {}\n            for field_name, text in form.errors.items():\n                fields[field_name] = text\n            errors.update(fields=fields)\n            to_json.update(errors=errors)\n        else:\n            obj = kwargs.get('obj')\n            to_json.update({\"title\": obj.title,\n                            \"text\": obj.text,\n                            \"author\": obj.author,\n                            \"created\": obj.created.strftime(\"%Y-%m-%d\")})\n        return json.dumps(to_json)\n\n\nclass JSONTagsView(JSONView, BaseListView):\n    \"\"\" Json view to get all tags for autocmpletion purpose\n    \"\"\"\n    model = Tag\n\n    def get_context_data(self, **kwargs):\n        queryset = kwargs.pop('object_list', self.object_list)\n        return [(tag.pk, tag.title) for tag in queryset]\n\n\nclass JSONSearchView(JSONView, BaseListView):\n    \"\"\" Search view, which accepts search queries via url, like google.\n        accepts 2 params:\n        * q is the full text query\n        * f is the list of active filters narrowing the search\n    \"\"\"\n\n    def get_queryset(self):\n        q = self.request.GET.get('q', \"\").strip()\n        filters = self.request.GET.getlist('f', [])\n        query = q or \"*\"\n        raw_hits, facets, active_facets = search(\n            q=query, filters=filters, query_string=self.request.GET,)\n        return Post.objects.filter(pk__in=[h['pk'] for h in raw_hits])\n\n    def get_context_data(self, **kwargs):\n        queryset = kwargs.pop('object_list', self.object_list)\n        return [(tag.pk, tag.title) for tag in queryset]",
			"file": "blog/views.py",
			"file_size": 7173,
			"file_write_time": 130663488211795035,
			"settings":
			{
				"buffer_size": 7335,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 369.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/creepingdeath/projects/django/potato-assignment",
		"/home/creepingdeath/projects/django/potato-assignment/blog",
		"/home/creepingdeath/projects/django/potato-assignment/blog/management",
		"/home/creepingdeath/projects/django/potato-assignment/blog/static",
		"/home/creepingdeath/projects/django/potato-assignment/sitepackages/whoosh"
	],
	"file_history":
	[
		"/home/creepingdeath/projects/django/potato-assignment/sitepackages/whoosh/analysis/tokenizers.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/management/commands/__init__.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/management/__init__.py",
		"/home/creepingdeath/projects/django/potato-assignment/contacts/sitemap.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/templates/blog/homepage.html",
		"/home/creepingdeath/projects/django/potato-assignment/blog/templates/blog/posts.html",
		"/home/creepingdeath/projects/django/potato-assignment/blog/views.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/templates/blog/include/post_meta.html",
		"/home/creepingdeath/projects/django/potato-assignment/blog/urls.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/templates/blog/post_confirm_delete.html",
		"/home/creepingdeath/projects/django/potato-assignment/blog/sitemap.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/static/blog/js/blog.js",
		"/home/creepingdeath/projects/django/potato-assignment/blog/models.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/templates/blog/include/post_in_listing.html",
		"/home/creepingdeath/projects/django/potato-assignment/blog/templates/blog/post.html",
		"/home/creepingdeath/projects/django/potato-assignment/potato_assignment/settings.py",
		"/home/creepingdeath/projects/django/potato-assignment/potato_assignment/urls.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/templates/blog/post_edit.html",
		"/home/creepingdeath/projects/django/potato-assignment/potato_assignment/templates/base.html",
		"/home/creepingdeath/projects/django/potato-assignment/blog/static/blog/css/blog.css",
		"/home/creepingdeath/projects/django/potato-assignment/sitepackages/django/views/generic/edit.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/templates/blog/tag.html",
		"/home/creepingdeath/projects/django/potato-assignment/blog/templates/blog/post_add.html",
		"/home/creepingdeath/projects/django/potato-assignment/sitepackages/google_appengine/lib/django-1.5/django/views/generic/edit.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/forms.py",
		"/home/creepingdeath/projects/django/potato-assignment/potato_assignment/templates/includes/form_error.html",
		"/home/creepingdeath/projects/django/potato-assignment/blog/admin.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/templates/blog/include/post_form_fields.html",
		"/home/creepingdeath/projects/django/potato-assignment/sitepackages/django/forms/models.py",
		"/home/creepingdeath/projects/django/potato-assignment/sitepackages/django/forms/widgets.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/test.py",
		"/home/creepingdeath/projects/django/potato-assignment/blog/templatetags/addclasstofield.py",
		"/home/creepingdeath/projects/django/potato-assignment/contacts/forms.py",
		"/home/creepingdeath/projects/django/potato-assignment/contacts/tests.py",
		"/home/creepingdeath/projects/django/potato-assignment/contacts/urls.py",
		"/home/creepingdeath/projects/django/potato-assignment/potato_assignment/boot.py",
		"/home/creepingdeath/projects/django/potato-assignment/contacts/templates/contacts/contacts.html",
		"/home/creepingdeath/projects/django/potato-assignment/blog/templates/blog/tags.html",
		"/home/creepingdeath/projects/django/potato-assignment/potato_assignment/static/css/custom.css",
		"/home/creepingdeath/projects/django/potato-assignment/static/js/select2.js",
		"/home/creepingdeath/projects/django/potato-assignment/static/css/select2.css",
		"/home/creepingdeath/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
		"/home/creepingdeath/.config/sublime-text-3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/home/creepingdeath/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/creepingdeath/.config/sublime-text-3/Packages/Pylinter/Pylinter.sublime-settings",
		"/home/creepingdeath/projects/django/potato_assignment/urls.py",
		"/home/creepingdeath/projects/django/blog/test.py",
		"/home/creepingdeath/projects/django/blog/urls.py",
		"/home/creepingdeath/projects/django/potato_assignment/settings.py",
		"/home/creepingdeath/projects/django/requirements.txt",
		"/home/creepingdeath/projects/django/potato_assignment/templates/base.html",
		"/home/creepingdeath/projects/django/blog/autocomplete_light_registry.py",
		"/home/creepingdeath/projects/django/blog/templates/blog/post.html",
		"/home/creepingdeath/projects/django/blog/templates/blog/homepage.html",
		"/home/creepingdeath/projects/django/blog/views.py",
		"/home/creepingdeath/projects/django/blog/models.py",
		"/home/creepingdeath/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/creepingdeath/.config/sublime-text-3/Packages/User/HTML.sublime-settings"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/creepingdeath/projects/django/",
			"/home/creepingdeath/projects/django/blog,/home/creepingdeath/projects/django/",
			"/home/creepingdeath/projects/django/blog,/home/creepingdeath/projects/django/potato_assignment",
			"/home/creepingdeath/projects/django/",
			"/home/creepingdeath/projects/django/blog",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"tag",
			"writer",
			"time",
			"\n    ",
			"()\n",
			"pdb",
			"index_fe",
			"delete",
			"sender",
			"kwargs",
			"inde",
			"\\w+(\\.?\\w+)*",
			"\\\\w+(\\\\.?\\\\w+)*",
			"idlist",
			"PostsSitemap",
			"TagsSitemap",
			"jango.template.loaders.app_directories.Loader",
			"Y-m-d",
			"filter",
			"get_queryset",
			"baselist",
			"queryset",
			"get_queryset",
			"posts",
			"pdb",
			"delete",
			"reverse",
			"delete",
			");\n",
			"JSONPostDelete",
			"delete",
			"creat",
			"form[field_name].value()",
			")\n",
			"form.",
			"form_valid",
			"def form_valid",
			"json",
			"get_context_data",
			"get_success_url",
			"Either provide a url or define",
			"Either provide a url or ",
			"Either provide a url or define a get_absolute_url method on the Model",
			"import revers",
			"reve",
			"comment-add",
			"commment-add",
			"post-add",
			"add",
			"{{",
			"datetime",
			"ModelFormMixin",
			"createv",
			"create",
			"reverse",
			"revers",
			"succ",
			"CommentForm",
			"empty ",
			"queryset",
			"Comment",
			" ",
			"CommentForm",
			"forein",
			"render(",
			"render",
			"render(",
			"choices",
			"SelectMultiple",
			"choice",
			"class modelm",
			"queryset",
			"SelectMultiple",
			"render(",
			"hidden_widget",
			"hidden",
			"ModelChoiceField",
			"queryset",
			"choicefield",
			"MultipleChoiceField",
			"TypedMultipleChoiceField",
			"choice",
			"ModelChoiceField",
			"class select",
			"Select",
			"multiple",
			"model",
			"choicef",
			"ModelChoiceField",
			"select",
			"value_from_datadict",
			"choices",
			"format_html",
			"import format_h",
			"def format_h",
			"format_h",
			"pdb",
			"SelectMultiple",
			"pdb",
			"ListWidget",
			"relation",
			"GenericRelationFormfield",
			"value",
			"rela",
			"widge",
			"relatedfield",
			"RelatedField",
			"relatedset",
			"widg",
			"multi",
			"hiddeninput",
			"hiddenin",
			"top",
			".cke_skin_BootstrapCK-Skin ",
			"info",
			"field",
			"meta",
			"label",
			"post-meta",
			".meta",
			"meta",
			"save",
			"edit",
			"exce",
			"_\\((.*?)\\)",
			"lint",
			"TaggableManager",
			"static_url"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"$1",
			"self.posts"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21,
						"regions":
						{
						},
						"selection":
						[
							[
								21,
								21
							]
						],
						"settings":
						{
							"auto_name": "713957764029942404031",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "blog/search.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3429,
						"regions":
						{
						},
						"selection":
						[
							[
								2668,
								2668
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1320.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "blog/models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4307,
						"regions":
						{
						},
						"selection":
						[
							[
								4010,
								4010
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2354.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "blog/management/commands/manage_index.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1390,
						"regions":
						{
						},
						"selection":
						[
							[
								972,
								972
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "blog/urls.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1304,
						"regions":
						{
						},
						"selection":
						[
							[
								616,
								616
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "blog/views.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7335,
						"regions":
						{
						},
						"selection":
						[
							[
								7173,
								7173
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4312.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 142.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "potato_assignment.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 258.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
